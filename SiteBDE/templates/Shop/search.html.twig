{% extends "base.html.twig" %}
{% block navbar %}
<!-- Menu -->
<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
    <ul class="nav navbar-nav">
        <li class="">
            <a href="/" >Accueil</a>
        </li>
        <li class="">
            <a href="/ideas">Boîte à idée</a>
        </li>
        <li class="">
            <a href="/events">Evènements</a>
        </li>
        <li class="active">
            <a href="/shop">Boutique</a>
        </li>
    </ul>
    {% endblock %}
{% block body %}
   <button type="button" class="btn btn-primary top-corner" onclick="window.location.href='/shop/cart'">Panier</button>
   <button type="button" class="btn btn-warning top-corner-shop" onclick="window.location.href='/shop/admin'">Gestion Boutique</button>
    <!-- Menu de recherche -->
    {% form_theme form 'bootstrap_4_layout.html.twig' %} <!-- Utiliser bootstrap -->
    <div id="login-overlay" class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
            <b> Rechercher un produit </b>
                <div class="col-xs-15">
                    <div class="well">
                        {{ form_start(form) }}
                        {{ form_errors(form) }}
                        <div class="form-check">
                        <b>Cochez vos catégories :</b>
                            {{ form_errors(form.category) }}
                            {{ form_widget(form.category) }}
                        </div>
                        <div class="form-group">
                        <b>Prix Max :</b>
                            {{ form_errors(form.maxPrice) }}
                            {{ form_widget(form.maxPrice) }}
                        </div>

                        <b>Recherchez :</b>
                            {{ form_errors(form.research) }}
                            {{ form_widget(form.research, {'attr': {'autocomplete': 'off'}}) }}
                        <!-- Boutton -->
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% if donnees is defined %}


    <div class="container">
        <div class="col-xs-12">
            <div class="carousel slide" id="myCarousel">
                <div class="carousel-inner">
                    <div class="item active">
                        <ul class="thumbnails">
                        {% for data in donnees %}
                            <li class="col-sm-3">
                                <div class="fff">
                                    <div class="thumbnail">
                                        <a href="#"><img src="../Uploads/{{ data.pathPhoto }}" alt="Photo" height="250" width="250"></a>
                                    </div>
                                    <div class="caption">
                                        <h4>{{ data.0.nom }}</h4>
                                        <p2>{{ data.0.description }} </p2>
                                        <br/>
                                        <b>{{ data.0.prix }} €</b>
                                    </div>
                                </div>
                            </li>
                        {% endfor %}
                        </ul>
                    </div><!-- /Slide1 -->
                </div><!-- /.control-box -->
            </div><!-- /#myCarousel -->
        </div><!-- /.col-xs-12 -->
    </div><!-- /.container -->
    {% endif %}
{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.1.1/aos.js"></script>
    <script src="../../JS/add_Image.js"></script> <!-- place youre js file here -->
    <script src="../../JS/bs-animation.js"></script> <!-- place youre js file here -->
    <script src="../../JS/navbar.js"></script> <!-- place youre js file here -->
    <script src="../../JS/shop.js"></script> <!-- place youre js file here -->

    <script type="text/javascript">
        function autocomplete(inp, arr) {
          /*the autocomplete function takes two arguments,
          the text field element and an array of possible autocompleted values:*/
          var currentFocus;
          /*execute a function when someone writes in the text field:*/
          inp.addEventListener("input", function(e) {
              var a, b, i, val = this.value;
              /*close any already open lists of autocompleted values*/
              closeAllLists();
              if (!val) { return false;}
              currentFocus = -1;
              /*create a DIV element that will contain the items (values):*/
              a = document.createElement("DIV");
              a.setAttribute("id", this.id + "autocomplete-list");
              a.setAttribute("class", "autocomplete-items");
              /*append the DIV element as a child of the autocomplete container:*/
              this.parentNode.appendChild(a);
              for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                  /*create a DIV element for each matching element:*/
                  b = document.createElement("DIV");
                  /*make the matching letters bold:*/
                  b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                  b.innerHTML += arr[i].substr(val.length);
                  /*insert a input field that will hold the current array item's value:*/
                  b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                  /*execute a function when someone clicks on the item value (DIV element):*/
                  b.addEventListener("click", function(e) {
                      /*insert the value for the autocomplete text field:*/
                      inp.value = this.getElementsByTagName("input")[0].value;
                      /*close the list of autocompleted values,
                      (or any other open lists of autocompleted values:*/
                      closeAllLists();
                  });
                  a.appendChild(b);
                }
              }
          });
          /*execute a function presses a key on the keyboard:*/
          inp.addEventListener("keydown", function(e) {
              var x = document.getElementById(this.id + "autocomplete-list");
              if (x) x = x.getElementsByTagName("div");
              if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
              } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                  /*and simulate a click on the "active" item:*/
                  if (x) x[currentFocus].click();
                }
              }
          });
          function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
          }
          function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
              x[i].classList.remove("autocomplete-active");
            }
          }
          function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
              if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
              }
            }
          }
          /*execute a function when someone clicks in the document:*/
          document.addEventListener("click", function (e) {
              closeAllLists(e.target);
              });
        }

        let articles = [];

        {% for nom in nomsArticles %}
            articles.push("{{ nom }}");
        {% endfor %}

        autocomplete(document.getElementById("form_research"), articles);

    </script>
{% endblock %}
{% endblock %}